//
// Auto-generated by dts-generator (https://github.com/enlight/dts-generator/)
//

declare module 'polymer-ts-decorators/decorators' {
	export function is(elementName: string): ClassDecorator;
	export function extend(elementName: string): ClassDecorator;
	/**
	 * Generates a class decorator that adds a behavior to a custom Polymer element.
	 *
	 * @param behaviorClassOrPrototype A behavior class (a constructor function) or a prototype object.
	 */
	export function behavior(behaviorClassOrPrototype: Function | Object): ClassDecorator;
	/** Generates a class decorator that adds a list of behaviors to a custom Polymer element. */
	export function behaviors(behaviorClassesOrPrototypes: Array<Function | Object>): ClassDecorator;
	/** Appends a bunch of observers to the `observers` property of a Polymer element prototype. */
	export function observers(observerList: string[]): ClassDecorator;
	/** Adds a bunch of event listeners to the `listeners` property of a Polymer element prototype. */
	export function listeners(listenerMap: any): ClassDecorator;
	/** Adds a bunch of attributes to the `hostAttributes` property of a Polymer element prototype. */
	export function hostAttributes(attributeMap: any): ClassDecorator;
	export function property<T>(propertyDefinition: polymer.IProperty<T>): PropertyDecorator;
	export function listener(eventName: string): MethodDecorator;

}

declare module 'polymer-ts-decorators' {
	export * from 'polymer-ts-decorators/decorators';
}
